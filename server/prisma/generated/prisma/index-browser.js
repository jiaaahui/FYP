
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BuildingScalarFieldEnum = {
  buildingid: 'buildingid',
  buildingname: 'buildingname',
  housingtype: 'housingtype',
  postalcode: 'postalcode',
  zoneid: 'zoneid',
  vehiclesizelimit: 'vehiclesizelimit',
  vehiclelengthlimit: 'vehiclelengthlimit',
  vehiclewidthlimit: 'vehiclewidthlimit',
  loadingbayavailable: 'loadingbayavailable',
  liftavailable: 'liftavailable',
  stairsavailable: 'stairsavailable',
  narrowdoorways: 'narrowdoorways',
  parkingdistance: 'parkingdistance',
  preregistrationrequired: 'preregistrationrequired',
  accesstimewindowstart: 'accesstimewindowstart',
  accesstimewindowend: 'accesstimewindowend',
  notes: 'notes',
  specialequipmentneeded: 'specialequipmentneeded',
  liftdimensions: 'liftdimensions'
};

exports.Prisma.ChatsScalarFieldEnum = {
  chatid: 'chatid',
  ordernumber: 'ordernumber',
  members: 'members',
  names: 'names',
  createdat: 'createdat',
  lastmessageat: 'lastmessageat'
};

exports.Prisma.CustomerScalarFieldEnum = {
  customerid: 'customerid',
  name: 'name',
  displayname: 'displayname',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  bio: 'bio',
  notificationsenabled: 'notificationsenabled',
  createdat: 'createdat'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  employeeid: 'employeeid',
  name: 'name',
  email: 'email',
  contact_number: 'contact_number',
  role: 'role',
  active_flag: 'active_flag',
  displayname: 'displayname',
  createdat: 'createdat',
  bio: 'bio'
};

exports.Prisma.EmployeeteamassignmentScalarFieldEnum = {
  employeeid: 'employeeid',
  teamid: 'teamid'
};

exports.Prisma.LorrytripScalarFieldEnum = {
  lorrytripid: 'lorrytripid',
  deliveryteamid: 'deliveryteamid',
  warehouseteamid: 'warehouseteamid',
  truckid: 'truckid'
};

exports.Prisma.OrderproductScalarFieldEnum = {
  orderid: 'orderid',
  productid: 'productid',
  quantity: 'quantity'
};

exports.Prisma.OrdersScalarFieldEnum = {
  orderid: 'orderid',
  customerid: 'customerid',
  employeeid: 'employeeid',
  deliveryteamid: 'deliveryteamid',
  buildingid: 'buildingid',
  timeslotid: 'timeslotid',
  numberofattempts: 'numberofattempts',
  scheduledstartdatetime: 'scheduledstartdatetime',
  scheduledenddatetime: 'scheduledenddatetime',
  actualstartdatetime: 'actualstartdatetime',
  actualenddatetime: 'actualenddatetime',
  actualarrivaldatetime: 'actualarrivaldatetime',
  customerrating: 'customerrating',
  delayreason: 'delayreason',
  customerfeedback: 'customerfeedback',
  proofofdeliveryurl: 'proofofdeliveryurl',
  orderstatus: 'orderstatus',
  updatedat: 'updatedat',
  createdat: 'createdat'
};

exports.Prisma.ProductScalarFieldEnum = {
  productid: 'productid',
  productname: 'productname',
  packagelengthcm: 'packagelengthcm',
  packagewidthcm: 'packagewidthcm',
  packageheightcm: 'packageheightcm',
  installerteamrequiredflag: 'installerteamrequiredflag',
  dismantlerequiredflag: 'dismantlerequiredflag',
  dismantleextratime: 'dismantleextratime',
  estimatedinstallationtimemin: 'estimatedinstallationtimemin',
  estimatedinstallationtimemax: 'estimatedinstallationtimemax',
  fragileflag: 'fragileflag',
  noliedownflag: 'noliedownflag'
};

exports.Prisma.TeamScalarFieldEnum = {
  teamid: 'teamid',
  teamtype: 'teamtype'
};

exports.Prisma.TimeslotScalarFieldEnum = {
  timeslotid: 'timeslotid',
  lorrytripid: 'lorrytripid',
  date: 'date',
  timewindowstart: 'timewindowstart',
  timewindowend: 'timewindowend',
  availableflag: 'availableflag'
};

exports.Prisma.TruckScalarFieldEnum = {
  truckid: 'truckid',
  carplate: 'carplate',
  tone: 'tone',
  lengthcm: 'lengthcm',
  widthcm: 'widthcm',
  heightcm: 'heightcm'
};

exports.Prisma.TruckzoneScalarFieldEnum = {
  truckid: 'truckid',
  zoneid: 'zoneid',
  isprimaryzone: 'isprimaryzone'
};

exports.Prisma.UsersScalarFieldEnum = {
  uid: 'uid',
  name: 'name',
  displayname: 'displayname',
  email: 'email',
  bio: 'bio',
  createdat: 'createdat'
};

exports.Prisma.ZoneScalarFieldEnum = {
  zoneid: 'zoneid',
  zonename: 'zonename'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  building: 'building',
  chats: 'chats',
  customer: 'customer',
  employee: 'employee',
  employeeteamassignment: 'employeeteamassignment',
  lorrytrip: 'lorrytrip',
  orderproduct: 'orderproduct',
  orders: 'orders',
  product: 'product',
  team: 'team',
  timeslot: 'timeslot',
  truck: 'truck',
  truckzone: 'truckzone',
  users: 'users',
  zone: 'zone'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
