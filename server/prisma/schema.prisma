generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model roles {
  id          String      @id @default(uuid())
  name        String
  permissions String[]    @default([])
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  employees   employees[]
}

model employees {
  id              String                      @id @default(uuid())
  name            String?
  displayName     String?                     @map("display_name")
  email           String?                     @unique
  contactNumber   String?                     @map("contact_number")
  roleId          String?                     @map("role_id")
  activeFlag      Boolean                     @default(true) @map("active_flag")
  password        String?
  bio             String?
  createdAt       DateTime                    @default(now()) @map("created_at")
  updatedAt       DateTime                    @updatedAt @map("updated_at")
  teamAssignments employee_team_assignments[]
  role            roles?                      @relation(fields: [roleId], references: [id], onUpdate: NoAction)
  orders          orders[]
}

model teams {
  id          String                      @id @default(uuid())
  teamType    String?                     @map("team_type")
  createdAt   DateTime                    @default(now()) @map("created_at")
  assignments employee_team_assignments[]
}

model employee_team_assignments {
  id         Int       @id @default(autoincrement())
  employeeId String    @map("employee_id")
  teamId     String?   @map("team_id")
  assignedAt DateTime? @map("assigned_at")
  employee   employees @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  team       teams?    @relation(fields: [teamId], references: [id], onUpdate: NoAction)

  @@unique([employeeId, teamId])
}

model zones {
  id          String        @id @default(uuid())
  zone_name   String?
  created_at  DateTime      @default(now())
  buildings   buildings[]
  truck_zones truck_zones[]
}

model buildings {
  id                        String    @id @default(uuid())
  building_name             String?
  housing_type              String?
  special_equipment_needed  String?
  vehicle_size_limit        String?
  vehicle_length_limit      String?
  vehicle_width_limit       String?
  postal_code               String?
  loading_bay_available     Boolean?
  access_time_window_start  String?
  access_time_window_end    String?
  pre_registration_required Boolean?
  zone_id                   String?
  lift_available            Boolean?
  lift_dimensions           String?
  notes                     String?
  parking_distance          String?
  narrow_doorways           Boolean?
  updated_at                DateTime?
  created_at                DateTime  @default(now())
  zone                      zones?    @relation(fields: [zone_id], references: [id], onUpdate: NoAction)
  orders                    orders[]
}

model access_logs {
  id         String    @id @default(uuid())
  changed_at DateTime?
  changes    Json?
}

model chats {
  id              String    @id @default(uuid())
  order_number    String?
  members         Json?
  names           Json?
  created_at      DateTime?
  last_message_at DateTime?
}

model customers {
  id         String    @id @default(uuid())
  full_name  String?
  email      String?
  phone      String?
  address    String?
  city       String?
  postcode   String?
  state      String?
  created_at DateTime?
  orders     orders[]
}

model lorry_trips {
  id                String    @id @default(uuid())
  delivery_team_id  String?
  warehouse_team_id String?
  truck_id          String?
  created_at        DateTime  @default(now())
  updated_at        DateTime?
  trucks            trucks?   @relation(fields: [truck_id], references: [id], onUpdate: NoAction)
}

model order_products {
  id                 Int      @id @default(autoincrement())
  order_id           String
  product_id         String
  quantity           Int?
  dismantle_required Boolean?
  dismantle_time_min Int?
  dismantle_time_max Int?
  orders             orders   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products           products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  id                        String           @id @default(uuid())
  customer_id               String?
  building_id               String?
  employee_id               String?
  order_status              String?
  number_of_attempts        Int?
  customer_rating           Float?
  proof_of_delivery_url     String?
  customer_feedback         String?
  time_slot_id              String?
  scheduled_start_date_time DateTime?
  scheduled_end_date_time   DateTime?
  actual_start_date_time    DateTime?
  actual_end_date_time      DateTime?
  actual_arrival_date_time  DateTime?
  created_at                DateTime?
  updated_at                DateTime?
  order_products            order_products[]
  buildings                 buildings?       @relation(fields: [building_id], references: [id], onUpdate: NoAction)
  customers                 customers?       @relation(fields: [customer_id], references: [id], onUpdate: NoAction)
  employees                 employees?       @relation(fields: [employee_id], references: [id], onUpdate: NoAction)
}

model products {
  id                              String           @id @default(uuid())
  product_name                    String?
  package_length_cm               Int?
  package_height_cm               Int?
  package_width_cm                Int?
  fragile_flag                    Boolean?
  installer_team_required_flag    Boolean?
  dismantle_time                  Int?
  created_at                      DateTime         @default(now())
  estimated_installation_time_min Int?
  estimated_installation_time_max Int?
  no_lie_down_flag                Boolean?
  dismantle_required_flag         Boolean?
  order_products                  order_products[]
}

model reports {
  id         String    @id @default(uuid())
  content    String?
  status     String?
  created_at DateTime?
}

model time_slots {
  id                String    @id @default(uuid())
  date              String?
  time_window_start String?
  time_window_end   String?
  available_flag    Boolean?
  created_at        DateTime?
}

model truck_zones {
  id              String   @id @default(uuid())
  zone_id         String?
  is_primary_zone Boolean?
  truck_id        String?
  trucks          trucks?  @relation(fields: [truck_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  zones           zones?   @relation(fields: [zone_id], references: [id], onUpdate: NoAction)
}

model trucks {
  id          String        @id @default(uuid())
  plate_no    String?
  length_cm   Int?
  width_cm    Int?
  height_cm   Int?
  tone        Int?
  created_at  DateTime      @default(now())
  lorry_trips lorry_trips[]
  truck_zones truck_zones[]
}
